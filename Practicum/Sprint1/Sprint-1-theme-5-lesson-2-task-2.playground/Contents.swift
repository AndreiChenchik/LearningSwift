import Foundation

// MARK: - ‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
//
// –ß—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è:
// 1. –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ —É—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞–Ω–∏—è
// 2. –ò–∑—É—á–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª —Ä–µ—à–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ `SolutionProtocol`
// 3. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –Ω–∏–∂–µ –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–†–µ—à–µ–Ω–∏–µ".
// 4. –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Ä–µ—à–µ–Ω–∏–µ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ, –∑–∞–ø—É—Å—Ç–∏—Ç–µ Playground,
//    —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞–º–∏

// MARK: - ‚ÑπÔ∏è –£—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞–Ω–∏—è
//
// "–ü–æ–∏—Å–∫ –º–∏–Ω–∏–º—É–º–∞ –∏ –º–∞–∫—Å–∏–º—É–º–∞ –≤ –º–∞—Å—Å–∏–≤–µ"
//
// –î–∞–Ω –º–∞—Å—Å–∏–≤ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª.
// –í—ã–≤–µ–¥–∏—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏–∑ —ç—Ç–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ.
// (–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ min –∏ max –Ω–µ–ª—å–∑—è).
// –ù–∞–ø—Ä–∏–º–µ—Ä: –¥–∞–Ω –º–∞—Å—Å–∏–≤ [4, 2, 1, 10, 3], –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ ‚Äì 10, –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ ‚Äì 1

// MARK: - üßë‚Äçüíª –†–µ—à–µ–Ω–∏–µ
// –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –ó–î–ï–°–¨
// –í array —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –Ω–µ–ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª.
// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ min –∏ max –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±—ä—è–≤–∏—Ç—å –≤ –≤–∞—à–µ–º –±–ª–æ–∫–µ —Ä–µ—à–µ–Ω–∏—è.
// –û–Ω–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ.

class Solution: SolutionProtocol {
    func findMinAndMax(in array: [Int]) -> (min: Int, max: Int) {
        // --- –ù–ê–ß–ê–õ–û –ö–û–î–ê –° –†–ï–®–ï–ù–ò–ï–ú ---
        var min = array[0]
        var max = array[0]
        for number in array {
            min = number < min ? number : min
            max = number > max ? number : max
        }
        // --- –ö–û–ù–ï–¶ –ö–û–î–ê –° –†–ï–®–ï–ù–ò–ï–ú ---
        return (min: min, max: max)
    }
}

// MARK: - üõ† –¢–µ—Å—Ç—ã
// - –ó–¥–µ—Å—å —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –∫–æ–¥ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è
// - ‚ö†Ô∏è –ù–µ –º–µ–Ω—è–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥

let solution: SolutionProtocol = Solution()
let testRunner = TestRunner(solution: solution)
testRunner.runTests(testCases: .default)
