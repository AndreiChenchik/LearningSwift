import Foundation

// MARK: - üõ† –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Ç–µ—Å—Ç–æ–≤
// - –ó–¥–µ—Å—å –Ω–∞–ø–∏—Å–∞–Ω –∫–æ–¥ –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π —Ç–µ—Å—Ç—ã
// - ‚ö†Ô∏è –ù–µ –º–µ–Ω—è–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥

public struct TestRunner {

    private let solution: SolutionProtocol

    public init(solution: SolutionProtocol) {
        self.solution = solution
    }

    public func runTests(testCases: [TestCase]) {
        print("‚ñ∂Ô∏è Starting test run with \(testCases.count) test cases ...")

        var failedTestsIndexes: [Int] = []
        for (i, testCase) in testCases.enumerated() {
            print("\nRunning test case #\(i) of \(testCases.count)")

            solution.save(id: testCase.id)

            if solution.id == testCase.result {
                print("‚úÖ Test #\(i) passed")
            } else {
                failedTestsIndexes.append(i)

                print("‚ùå Test #\(i) failed")
                print("Expected id to be \(testCase.result), but got \(solution.id)")
            }
        }

        print("\n‚èπ Finishing test run...\n")
        if failedTestsIndexes.isEmpty {
            print("‚úÖ All \(testCases.count) test passed")
        } else {
            print("‚ùå Test run failed for \(failedTestsIndexes.count) of \(testCases.count) test cases")

            let failedTestCaseIDsString = failedTestsIndexes
                .map { "#\($0)" }
                .joined(separator: ", ")
            print("Failed test cases are: \(failedTestCaseIDsString)")
        }
    }
}
